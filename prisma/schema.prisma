// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  fullName     String        @map("full_name")
  password     String        @db.VarChar(255)
  address      String        @db.VarChar(255)
  phoneNumber  String        @map("phone_number")
  role         Role          @relation(fields: [roleId], references: [id])
  roleId       Int           @map("role_id")
  token        String?       @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]

  @@map("users")
}

model Role {
  id    Int    @id
  name  String @unique
  users User[]

  @@map("roles")
}

model Car {
  id                 Int           @id @default(autoincrement())
  carModel           CarModel      @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  carModelId         Int           @map("car_model_id")
  registrationNumber String        @map("registration_number")
  rented             Boolean       @default(false)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  reservations       Reservation[]

  @@map("cars")
}

model CarModel {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  costPerDay Int      @map("cost_per_day")
  imageUrl   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  cars       Car[]

  @@map("car_models")
}

model Reservation {
  id        Int      @id @default(autoincrement())
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     Int      @map("car_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  totalCost Int      @map("total_cost")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  return    Return?

  @@map("reservations")
}

model Return {
  id            Int          @id @default(autoincrement())
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId Int          @unique @map("reservation_id")
  createdAt     DateTime     @default(now()) @map("created_at")

  @@map("returns")
}
